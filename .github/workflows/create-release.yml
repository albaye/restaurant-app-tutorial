name: Automated Release

on:
  push:
    branches:
      - master

  workflow_dispatch:

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write # Required for creating releases and pushing tags
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'

      - name: Install Dependencies
        run: npm install

      - name: Generate Changelog and Update Version
        id: versioning
        run: |
          npm run changelog
          echo "RELEASE_BODY_FILE=release_body.txt" >> $GITHUB_OUTPUT
          cat CHANGELOG.md > release_body.txt
          NEXT_VERSION=$(npm version patch --no-git-tag-version)
          echo "NEXT_VERSION=$NEXT_VERSION" >> $GITHUB_OUTPUT

      - name: Get Last Release Notes
        id: last_release_notes
        run: |
          # Ensure CHANGELOG.md exists before processing
          if [ ! -f CHANGELOG.md ]; then
            # echo "LAST_RELEASE_BODY=No changelog found" >> $GITHUB_OUTPUT
            echo "No changelog found"
            exit 0
          fi

          # Case-insensitive, handles variations like "# v1.0.0", "## V1.0.0"
          LAST_RELEASE_HEADER=$(grep -E -i '^#+\s*v[0-9]' CHANGELOG.md | head -n 1)

          # If no header found, exit with empty release body
          if [ -z "$LAST_RELEASE_HEADER" ]; then
            # echo "LAST_RELEASE_BODY=" >> $GITHUB_OUTPUT
            echo ""
            exit 0
          fi

          # Escape special characters to handle headers with regex characters
          ESCAPED_HEADER=$(printf '%s\n' "$LAST_RELEASE_HEADER" | sed 's/[[\.*^$/]/\\&/g')

          # Find start and end lines more reliably
          start_line=$(grep -n -F "$ESCAPED_HEADER" CHANGELOG.md | cut -d':' -f1)
          next_version_line=$(grep -n -E '^#+\s*v[0-9]' CHANGELOG.md | awk -v start="$start_line" '$1 > start {print $1; exit}' | cut -d':' -f1)

          # Extract release notes
          if [ -n "$next_version_line" ]; then
            release_notes=$(sed -n "$((start_line + 1)),$((next_version_line - 1))p" CHANGELOG.md)
          else
            release_notes=$(sed -n "$((start_line + 1)),\$p" CHANGELOG.md)
          fi

          echo "$release_notes" > release_body.txt

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.versioning.outputs.NEXT_VERSION }}
          release_name: Release ${{ steps.versioning.outputs.NEXT_VERSION }}
          body_path: ${{ steps.versioning.outputs.RELEASE_BODY_FILE }}
          draft: false
          prerelease: false

      - name: Commit and Push to Master
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "GitHub Actions Bot"
          git add package.json CHANGELOG.md
          git commit -m "chore(release): ${{ steps.versioning.outputs.NEXT_VERSION }}"
          git push origin HEAD:master --follow-tags

      - name: Merge to Staging and Development
        run: |
          git checkout staging
          git merge --no-ff master -m "Merge release ${{ steps.versioning.outputs.NEXT_VERSION }} from master"
          git push origin staging

          git checkout development
          git merge --no-ff master -m "Merge release ${{ steps.versioning.outputs.NEXT_VERSION }} from master"
          git push origin development